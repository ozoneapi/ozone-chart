apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helpers.app.fullname" (dict "name" "deployment" "context" $) }}
  namespace: {{ $.Release.Namespace }}
  labels: 
    {{- include "helpers.app.labels" $ | nindent 4 }}
  annotations: 
    {{- include "helpers.app.genericAnnotations" $ | indent 4 }}
spec: 
  replicas: {{ .Values.deployment.replicas | default 3 }}
  selector:
    matchLabels:
      {{- include "helpers.app.selectorLabels" $ | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        {{- include "helpers.app.selectorLabels" $ | nindent 8 }}
        {{- with $.Values.generic.podLabels }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 8 }}{{- end }}
      annotations:
        {{- with $.Values.generic.podAnnotations }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 8 }}{{- end }}
    spec:
      containers:
      - name: default
        image: {{ .Values.deployment.image }}:{{ .Values.deployment.imageTag }}
        imagePullPolicy: Always
        ports:
        - name: https-hhcm
          containerPort: 2000
          protocol: TCP
        - name: http-admin
          containerPort: 3000
          protocol: TCP
        - name: http-self-serv
          containerPort: 3001
          protocol: TCP
        - name: http-dev-portal
          containerPort: 3002
          protocol: TCP
        - name: http-git-hook
          containerPort: 3003
          protocol: TCP
        - name: https-asrsod
          containerPort: 4000
          protocol: TCP
        - name: http-health
          containerPort: 4001
          protocol: TCP
        - name: http-tempad
          containerPort: 4600
          protocol: TCP
        - name: http-auto-auth
          containerPort: 4900
          protocol: TCP        
        resources: {{- include "helpers.tplvalues.render" ( dict "value" .Values.deployment.resources "context" $) | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /
            port: 4001
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: {{ .Values.deployment.securityContext.allowPrivilegeEscalation | default false }}
          privileged: {{ .Values.deployment.securityContext.privileged | default false }}
          readOnlyRootFilesystem: {{ .Values.deployment.securityContext.readOnlyRootFilesystem | default true }}
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: {{ include "helpers.app.fullname" (dict "name" "deployment" "context" $) }}-logs
          mountPath: /var/log/nginx/
          readOnly: false
      {{- if $.Values.generic.extraImagePullSecrets  }}
      imagePullSecrets:
        {{- with $.Values.generic.extraImagePullSecrets }}{{- include "helpers.tplvalues.render" ( dict "value" . "context" $) | nindent 8 }}{{- end }}
        {{- end }}
      restartPolicy: Always
      securityContext:
        runAsNonRoot: {{ .Values.deployment.securityContext.runAsNonRoot | default true }}
        runAsUser: {{ .Values.deployment.securityContext.runAsUser }}
        runAsGroup: {{ .Values.deployment.securityContext.runAsGroup }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            {{- include "helpers.app.selectorLabels" $ | nindent 14 }}
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            {{- include "helpers.app.selectorLabels" $ | nindent 14 }}
      volumes:
      - name: {{ include "helpers.app.fullname" (dict "name" "deployment" "context" $) }}-logs
        {{- include "helpers.tplvalues.render" ( dict "value" .Values.deployment.volumes.logs "context" $) | nindent 8 }}